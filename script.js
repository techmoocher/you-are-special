document.addEventListener('DOMContentLoaded', function() {
    // Card data - personality traits with descriptions
    const cardData = [
        {
            title: "Xin ch√†o ng∆∞·ªùi ƒë·∫πp!!!",
            image: "images/special.jpg",
            description: "Hellooo, v·ªÅ c√°i c√¢u n√≥i \"em th·∫•y ch·ªã c≈©ng b√¨nh th∆∞·ªùng\" ƒë√≥, em r·∫•t xin l·ªói. Em hong c·ªë √Ω ph√° mood ch·ªã ƒë√¢u. ƒê·ªëi v·ªõi em ch·ªã hong h·ªÅ b√¨nh th∆∞·ªùng, c√†ng hong t·∫ßm th∆∞·ªùng. Ch·ªã l√† m·ªôt ng∆∞·ªùi r·∫•t r·∫•t ƒë·∫∑c bi·ªát. Em xin l·ªói r·∫•t nhi·ªÅu v√¨ c√¢u ƒë√πa d·ª°n v√¥ √Ω t·ª© ƒë√≥ c·ªßa em. Em hong c·ªë √Ω l√†m ch·ªã b√πn ƒë√¢u. Ch√∫c ch·ªã m·ªôt ng√†y vui v·∫ª nheeee."
        },
        {
            title: "Xinh ƒë·∫πppp",
            image: "images/beautiful.jpg",
            description: "C√°i n√†y ch·∫Øc ch·ªã nghe nhi·ªÅu r√≤i. Em n√≥i c≈©ng h∆°i th·ª´a nh∆∞ng m√† ch·ªã r·∫•t xinh lun √°. Hong ph·∫£i l√† ki·ªÉu b√¨nh th∆∞·ªùng m√† l√† n√≥ c√≥ n√©t r·∫•t l√† ri√™ng. L√∫c ch·ªã g·ª≠i friend request ·∫•n t∆∞·ª£ng ƒë·∫ßu ti√™n c·ªßa em l√† \"·ªí ai m√† xinh d·ªØ v·∫≠y n√®\". C·∫£m gi√°c nh∆∞ ki·ªÉu t√¨m th·∫•y m·ªôt vi√™n Ng·ªçc r·∫•t √≥ng √Ånh. ƒê√∫ng nghƒ©a l√† \"Ng·ªçc √çnh r·∫•t xanhh\""
        },
        {
            title: "D·ªÖ th∆∞∆°nggg",
            image: "images/cute.jpg",
            description: "D·ªÖ th∆∞∆°ng th√¨ ph·∫£i g·ªçi l√† mi·ªÖn b√†n. T·ª´ gi·ªçng n√≥i, c·ª≠ ch·ªâ, cho ƒë·∫øn ngo·∫°i h√¨nh ƒë·ªÅu d·ªÖ th∆∞∆°ng. Suy nghƒ© n·ªØaaaa. N√≥i chuy·ªán v·ªõi ch·ªã m√† em kh√°m ph√° ra ƒë∆∞·ª£c nhi·ªÅu g√≥c nh√¨n c·ª±c k·ª≥ d·ªÖ th∆∞∆°ng lu√¥n. ƒê√∫ng nghƒ©a you make my day. C√≥ m·∫•y h√¥m c·∫£m th·∫•y ƒë√∫ng t·ªá nh∆∞ng m√† nh·∫Øn v·ªõi ch·ªã v√†i c√¢u l√† ki·ªÉu s·∫°c ƒë·∫ßy nƒÉng l∆∞·ª£ng lu√¥n √°."
        },
        {
            title: "N·ª• c∆∞·ªùi c·ªßa ch·ªã",
            image: "images/smile.jpg",
            description: "N·ª• c∆∞·ªùi c·ªßa ch·ªã r·∫•t ƒë·∫πp √°. ƒê·∫πp hong bi·∫øt t·∫£ sao lun. Nh√¨n ƒë√∫ng cu·ªën lunnn. N√≥ ki·ªÉu d·ªãu d√†ng m√† n√≥ ƒë·∫∑c bi·ªát √°. Nhi·ªÅu khi bu·ªìn bu·ªìn em v√†o coi profile ch·ªã m√£i m√† hong ch√°n lun. C·∫£m ∆°n r·∫•t nhi·ªÅu v√¨ nh·ªØng t·∫•m h√¨nh daily update c·ªßa ch·ªã. C·∫£m th·∫•y may m·∫Øn v√¨ ƒë∆∞·ª£c m·ªôt ng∆∞·ªùi ƒë·∫πp nh∆∞ d·ªã add locket."
        },
        {
            title: "ƒê·ªô \"d·ª°n\"",
            image: "images/funny.jpg",
            description: "R·∫•t r·∫•t th√≠ch ch·ªã ·ªü ƒëi·ªÉm n√†y lunnn. Ch·ªã lu√¥n l√†m cho em c·∫£m th·∫•y vui khi nh·∫Øn v·ªõi ch·ªã (d√π em hong ph·∫£i l√∫c n√†o c≈©ng l√†m ch·ªã dzui ü•π). Nhi·ªÅu khi em th·∫•y joke ch·∫£ c√≥ g√¨ hay nh∆∞ng m√† ch·ªã v·∫´n khen. C√≤n m·∫•y c√°i h√†i h√†i trong cu·ªôc s·ªëng c·ªßa ch·ªã n·ªØa. C·∫£m ∆°n nh√¨u ·∫°aa"
        },
        {
            title: "ƒê·∫ßu √≥c s√°ng t·∫°o",
            image: "images/creative.jpg",
            description: "Ch·ªã si√™u si√™u s√°ng t·∫°o lun. Nhi·ªÅu khi nghƒ© ra ƒë∆∞·ª£c m·∫•y c√°i m√† em c√≤n hong nghƒ© ƒë·∫øn ƒë∆∞·ª£c (theo nghƒ©a t√≠ch c·ª±c nhe üòÅ). G√≥c nh√¨n c·ª±c k·ª≥ m·ªü mang ƒë·∫ßu √≥c lun ü§Ø. N√≥i chuy·ªán v·ªõi ch·ªã m√† em h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu m·ªõi l·∫Øm √°"
        },
        {
            title: "Gi·ªèi!!!",
            image: "images/smart.jpg",
            description: "Tr√≤i oii hong bi·∫øt khen sao cho h·∫øt lun. C·ª±c k·ª≥ nƒÉng n·ªï v√† c≈©ng hong k√©m ph·∫ßn th√¥ng minh. ƒÇn gi·∫£i th√¨ ph·∫£i g·ªçi l√† nh∆∞ ƒÉn c∆°m lun. ƒê·ªëi th·ªß ch·ªã \"beat\" nh∆∞ con hong ƒë·∫ª. Nh√¨n thoy l√† th·∫•y ng∆∞·ª°ng m·ªô r√≤i. C√≤n m·∫•y c√°i d·ª± √°n c√¢u l·∫°c b·ªô ƒë·ªß th·ª© n·ªØa ch·ª©. ƒê·ªânh qu√° ƒë·ªânh!!! ü§©"
        },
        {
            title: "\"Ch·ªã ong n√¢u n√¢u\"",
            image: "images/friendly.jpg",
            description: "H·∫ø l√¥ chi·∫øn th·∫ßn ngo·∫°i giao. L√∫c ƒë·∫ßu l∆∞·ªõt profile ch·ªã l√† th·∫•y h∆°i b·ªã b·∫•t ng·ªù r√≤i. Nh√¨n r·∫•t r·∫•t c√≥ v·∫ª l√† ngo·∫°i giao =)))). Th·∫•y 2k m·∫•y friends nh√¨n c≈©ng h∆°i ng·∫°i. Ti·∫øp x√∫c r√≤i m·ªõi th·∫•y c√°ch ch·ªã n√≥i chuy·ªán hay thi·ªáccc. C·∫£m ∆°n v√¨ ƒë√£ hong bao gi·ªù khi·∫øn c√¢u chuy·ªán c·ªßa em ƒëi v√†o ng√µ c·ª•t d√π nhi·ªÅu khi n√≥ nh·∫£m vo√£i lun."
        },
        {
            title: "Gi·ªçng hayyy!!!",
            image: "images/voice.jpg",
            description: "L·∫ßn ƒë·∫ßu g·∫∑p ch·ªã em h∆°i b·∫•t ng·ªù l√† ch·ªã c√≥ gi·ªçng n√≥i c√≤n c√≥ m√πi mi·ªÅn T√¢y. Nh∆∞ng m√† nghe k·ªπ th·∫•y gi·ªçng r·∫•t l√† hay lun. N√≥ r·∫•t l√† c√≥ ch·∫•t ri√™ng, nghe m√πi ƒë∆∞·ªùng, h∆°i th√¥n qu√™ nh∆∞ng v·∫´n c√≥ n√©t th√†nh th·ªã v√† r·∫•t r·∫•t ƒë·ªôc ƒë√°o. C·∫£m ∆°n r·∫•t nhi·ªÅu v√¨ ƒë√£ cho em c∆° h·ªôi ƒë∆∞·ª£c nghe th·ª≠ nhe. ƒê·ª´ng t·ª± ti v√¨ gi·ªçng n·ªØa nh√°aa ch·ªã streamer."
        },
    ];

    const loveLetter = document.getElementById('love-letter');
    const cardDeck = document.getElementById('card-deck');
    
    let currentCardIndex = 0;
    
    // Function to show the final goodbye card
    function showGoodbyeCard() {
        // Hide all current cards
        document.querySelectorAll('.card').forEach(card => {
            card.classList.remove('active');
        });

        // Create the goodbye card
        const goodbyeCard = document.createElement('div');
        goodbyeCard.classList.add('card', 'active', 'goodbye-card');
        
        goodbyeCard.innerHTML = `
            <div class="card-img-container">
                <img src="images/fav-flower.jpg" alt="Favorite Flower" class="card-img">
            </div>
            <h2 class="card-title">ƒê·ª´ng b√πn n·ªØa nheee</h2>
            <p class="card-text">T·∫∑ng ch·ªã b√≥ hoa em th√≠ch nh·∫•t n√® hehe. ƒê·ª´ng b√πn n·ªØa nhe. Ch·ªã hong c√≥ b√¨nh th∆∞·ªùng ƒë√¢u. ƒê·ªëi v·ªõi em ch·ªã r·∫•t r·∫•t ƒë·∫∑c bi·ªát. M·ªôt l·∫ßn n·ªØa r·∫•t xin l·ªói v√¨ c√¢u d·ª°n b·∫≠y c·ªßa em. Em h·ª©a hong d·ª°n ki·ªÉu v·∫≠y n·ªØa. Vui l√™n nh√≥eeee. Enjoy your day!!! üíñ</p>
            <div class="navigation">
                <button class="nav-btn prev-btn">Quay l·∫°i</button>
            </div>
        `;
        
        // Apply image styling
        const imgContainer = goodbyeCard.querySelector('.card-img-container');
        imgContainer.style.width = '100%';
        imgContainer.style.maxHeight = '400px';
        imgContainer.style.overflow = 'hidden';
        imgContainer.style.borderRadius = '8px';
        imgContainer.style.marginBottom = '15px';
        imgContainer.style.display = 'flex';
        imgContainer.style.justifyContent = 'center';
        imgContainer.style.alignItems = 'center';
        
        const img = goodbyeCard.querySelector('.card-img');
        img.style.maxWidth = '100%';
        img.style.maxHeight = '400px';
        img.style.objectFit = 'contain';
        img.style.objectPosition = 'center';
        
        // Add event to adjust container height after image loads
        img.onload = function() {
            // Let container height adjust to the image's natural height
            imgContainer.style.height = 'auto';
        };

        // Add card to deck
        cardDeck.appendChild(goodbyeCard);
        
        // Add event listener to the back button
        const prevBtn = goodbyeCard.querySelector('.prev-btn');
        prevBtn.onclick = function(e) {
            e.stopPropagation();
            // Remove goodbye card
            goodbyeCard.remove();
            // Show the last regular card
            currentCardIndex = cardData.length - 1;
            updateCardVisibility();
        };
    }
    
    // Create floating petals
    function createFloatingPetals() {
        for (let i = 0; i < 20; i++) {
            createPetal();
        }
        
        // Continue creating petals at intervals
        setInterval(createPetal, 3000);
    }
    
    function createPetal() {
        const petal = document.createElement('div');
        petal.classList.add('floating-petal');
        
        // Random horizontal position
        const randomX = Math.random() * 100;
        petal.style.left = `${randomX}%`;
        
        // Random animation duration
        const randomDuration = 15 + Math.random() * 10;
        petal.style.animationDuration = `${randomDuration}s`;
        
        // Random delay
        const randomDelay = Math.random() * 10;
        petal.style.animationDelay = `${randomDelay}s`;
        
        // Random size
        const randomSize = 0.7 + Math.random() * 0.6;
        petal.style.transform = `scale(${randomSize})`;
        
        document.body.appendChild(petal);
        
        // Remove petal after animation ends
        setTimeout(() => {
            petal.remove();
        }, randomDuration * 1000 + randomDelay * 1000);
    }
    
    // Create cherry blossoms
    function createCherryBlossoms() {
        // Don't create any blossoms initially - they will be created by interval only
        
        // Create blossoms at intervals
        setInterval(createBlossom, 3000);
    }
    
    function createBlossom() {
        const blossom = document.createElement('div');
        blossom.classList.add('floating-blossom');
        
        // Random horizontal position
        const randomX = Math.random() * 100;
        blossom.style.left = `${randomX}%`;
        
        // Start from top of the page
        blossom.style.top = '-50px';
        
        // Random animation duration
        const randomDuration = 12 + Math.random() * 8;
        blossom.style.animationDuration = `${randomDuration}s`;
        
        // No delay - start immediately
        blossom.style.animationDelay = '0s';
        
        // Random size
        const randomSize = 0.8 + Math.random() * 0.7;
        blossom.style.transform = `scale(${randomSize})`;
        
        document.body.appendChild(blossom);
        
        // Remove blossom after animation ends
        setTimeout(() => {
            if (blossom.parentNode) {
                blossom.remove();
            }
        }, randomDuration * 1000);
    }

    // Create heart burst effect
    function createHeartBurst(x, y) {
        const burstContainer = document.createElement('div');
        burstContainer.className = 'heart-burst-container';
        burstContainer.style.left = x + 'px';
        burstContainer.style.top = y + 'px';
        
        for (let i = 0; i < 8; i++) {
            const heart = document.createElement('div');
            heart.className = 'heart-particle';
            const angle = (i / 8) * 360;
            heart.style.setProperty('--angle', angle + 'deg');
            burstContainer.appendChild(heart);
        }
        
        document.body.appendChild(burstContainer);
        setTimeout(() => burstContainer.remove(), 2000);
    }

    // Create cards and add to deck
    function createCards() {
        cardData.forEach((data, index) => {
            const card = document.createElement('div');
            card.classList.add('card');
            if (index === 0) card.classList.add('active');
            
            // Create card content
            card.innerHTML = `
                <div class="card-img-container">
                    <img src="${data.image}" alt="${data.title}" class="card-img">
                </div>
                <h2 class="card-title">${data.title}</h2>
                <p class="card-text">${data.description}</p>
                <div class="navigation">
                    <button class="nav-btn prev-btn">Quay l·∫°i</button>
                    <button class="nav-btn next-btn">${index === cardData.length - 1 ? 'Xem th√™m' : 'Ti·∫øp theo'}</button>
                </div>
            `;
            
            // Apply image styling
            const imgContainer = card.querySelector('.card-img-container');
            imgContainer.style.width = '100%';
            imgContainer.style.maxHeight = '400px';
            imgContainer.style.overflow = 'hidden';
            imgContainer.style.borderRadius = '8px';
            imgContainer.style.marginBottom = '15px';
            imgContainer.style.display = 'flex';
            imgContainer.style.justifyContent = 'center';
            imgContainer.style.alignItems = 'center';
            
            const img = card.querySelector('.card-img');
            img.style.maxWidth = '100%';
            img.style.maxHeight = '400px';
            img.style.objectFit = 'contain';
            img.style.objectPosition = 'center';
            
            // Add event to adjust container height after image loads
            img.onload = function() {
                // Let container height adjust to the image's natural height
                imgContainer.style.height = 'auto';
            };
            
            // Add card to deck first so it's in the DOM
            cardDeck.appendChild(card);
            
            // Now get references to the buttons and add event listeners
            const prevBtn = card.querySelector('.prev-btn');
            const nextBtn = card.querySelector('.next-btn');
            
            // Use more direct click handling
            prevBtn.onclick = function(e) {
                e.stopPropagation();
                if (currentCardIndex > 0) {
                    currentCardIndex--;
                    updateCardVisibility();
                }
            };
            
            nextBtn.onclick = function(e) {
                e.stopPropagation();
                if (index === cardData.length - 1) {
                    // Show goodbye card when last card's next button is clicked
                    showGoodbyeCard();
                } else if (currentCardIndex < cardData.length - 1) {
                    currentCardIndex++;
                    updateCardVisibility();
                }
            };
        });
    }
    
    // Update which card is visible with animation
    function updateCardVisibility() {
        const cards = document.querySelectorAll('.card');
        cards.forEach((card, index) => {
            
            // Make the current card active and others inactive
            if (index === currentCardIndex) {
                card.classList.add('active');
                
                // Ensure buttons on active card are explicitly clickable
                const buttons = card.querySelectorAll('.nav-btn');
                buttons.forEach(btn => {
                    btn.style.pointerEvents = 'auto';
                    btn.style.zIndex = '100';
                    btn.style.position = 'relative'; // Ensure z-index works
                    console.log('Setting button clickable:', btn);
                });
                
                // Update button visibility for the active card
                const prevBtn = card.querySelector('.prev-btn');
                
                // Set button visibility based on current card index
                if (currentCardIndex === 0) {
                    prevBtn.style.display = 'none';
                } else {
                    prevBtn.style.display = 'block';
                    prevBtn.style.opacity = '1';
                }
                
                console.log(`Active card ${index} buttons updated. Prev display: ${prevBtn.style.display}`);
            } else {
                card.classList.remove('active');
                
                // Disable pointer events on inactive cards
                card.style.pointerEvents = 'none';
            }
        });
        
        // Re-enable pointer events on the active card
        const activeCard = document.querySelector('.card.active');
        if (activeCard) {
            activeCard.style.pointerEvents = 'auto';
            console.log('Activated card pointer events');
        }
    }
    
    // Event listener for love letter click
    loveLetter.addEventListener('click', function(e) {
        // Create heart burst effect at click position
        const rect = loveLetter.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        createHeartBurst(centerX, centerY);
        
        // Add envelope open animation
        loveLetter.style.transform = 'scale(1.2) rotate(5deg)';
        loveLetter.style.transition = 'all 0.5s ease-out';
        
        setTimeout(() => {
            loveLetter.style.opacity = '0';
            loveLetter.style.transform = 'scale(0.8) rotate(-10deg)';
        }, 200);
        
        setTimeout(() => {
            loveLetter.classList.add('hidden');
            cardDeck.classList.remove('hidden');
            
            // Add dramatic entrance animation for the first card
            const firstCard = document.querySelectorAll('.card')[0];
            firstCard.style.transform = 'translateY(100px) scale(0.8) rotateX(45deg)';
            firstCard.style.opacity = '0';
            firstCard.style.transition = 'all 1.2s cubic-bezier(0.175, 0.885, 0.32, 1.275)';
            
            setTimeout(() => {
                firstCard.classList.add('active');
                firstCard.style.transform = 'translateY(0) scale(1) rotateX(0)';
                firstCard.style.opacity = '1';
            }, 100);
        }, 600);
    });
    
    // Initialize the page
    createCards();
    createFloatingPetals();
    createCherryBlossoms();
    updateCardVisibility();
});